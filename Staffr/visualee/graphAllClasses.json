{"nodes":[{"name":"Office","group":1,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to Address</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@Entity\npublic class Office {\n\n    @Column()\n    private String name;\n\n    @Column()\n    private String note;\n\n    @ManyToOne()\n    @JoinColumn(name=\"ADDRESS_ID\")\n    private Address address;\n\n}\n","id":0},{"name":"EmployeeDao","group":2,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.transaction.annotation.*;\nimport system.business.Employee;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 9/3/17.\n */\npublic class EmployeeDao extends BaseDao&lt;Employee&gt;{\n\n    protected EmployeeDao() {\n        super(Employee.class);\n    }\n\n    @Transactional(readOnly = true)\n    public Employee findByName(String firstName, String lastName) {\n        Objects.requireNonNull(firstName);\n        Objects.requireNonNull(lastName);\n        try {\n            return em.createNamedQuery(\"Employee.findByName\", Employee.class)\n                    .setParameter(\"firstName\", firstName.toLowerCase())\n                    .setParameter(\"lastName\", lastName.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n\n}\n","id":1},{"name":"User","group":3,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\nimport javax.persistence.*;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@Entity()\npublic class User {\n    @Column\n    private String userName;\n\n    @Column\n    private String password;\n\n    @Column\n    private Role role;\n\n}\n","id":2},{"name":"Address","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@Entity()\npublic class Address {\n\n    @Column()\n    private String country;\n\n    @Column()\n    private String city;\n\n    @Column()\n    private int psc;\n\n    @Column()\n    private String street;\n\n    @Column()\n    private String cp;\n}\n","id":3},{"name":"AbstractBusinessObject","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.MappedSuperclass;\nimport java.io.Serializable;\n\n/**\n * Created by MarekS on 26.08.2017.\n */\n\n@MappedSuperclass\npublic abstract class AbstractBusinessObject implements Serializable{\n    @Id\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\n    protected int id;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n}\n","id":4},{"name":"Degree","group":1,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to University</nobr>","sourcecode":"package system.business;\n\nimport system.business.enums.DegreeType;\nimport system.business.enums.SkillProfficiency;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@Entity\npublic class Degree {\n\n    @Enumerated()\n    private DegreeType type;\n\n    @Column()\n    private String name;\n\n    @Column()\n    private Date from;\n\n    @Column()\n    private Date to;\n\n    @ManyToOne()\n    @JoinColumn(name=\"UNIVERSITY_ID\")\n    private University university;\n}\n","id":5},{"name":"Position","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\n/**\n * Created by krystof on 9/3/17.\n */\npublic class Position {\n    private String name;\n}\n","id":6},{"name":"BaseDao","group":2,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.PersistenceException;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\npublic abstract class BaseDao&lt;T&gt; implements GenericDao&lt;T&gt; {\n\n    @PersistenceContext\n    EntityManager em;\n\n    protected final Class&lt;T&gt; type;\n\n    protected BaseDao(Class&lt;T&gt; type) {\n        this.type = type;\n    }\n\n    @Transactional(readOnly = true)\n    @Override\n    public T find(Integer id) {\n        Objects.requireNonNull(id);\n        return em.find(type, id);\n    }\n\n    @Transactional(readOnly = true)\n    @Override\n    public List&lt;T&gt; findAll() {\n        try {\n            return em.createQuery(\"SELECT e FROM \" + type.getSimpleName() + \" e\", type).getResultList();\n        } finally {\n            em.close();\n        }\n    }\n\n    @Transactional\n    @Override\n    public void persist(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            em.persist(entity);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    @Transactional\n    @Override\n    public void persist(Collection&lt;T&gt; entities) {\n        Objects.requireNonNull(entities);\n        if (entities.isEmpty()) {\n            return;\n        }\n        try {\n            entities.forEach(this::persist);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    @Transactional\n    @Override\n    public T update(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            return em.merge(entity);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    @Transactional\n    @Override\n    public void remove(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            final T toRemove = em.merge(entity);\n            if (toRemove != null) {\n                em.remove(toRemove);\n            }\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    @Transactional\n    @Override\n    public void remove(Collection&lt;T&gt; entities) {\n        Objects.requireNonNull(entities);\n        if (entities.isEmpty()) {\n            return;\n        }\n        entities.forEach(this::remove);\n    }\n\n    @Transactional(readOnly = true)\n    @Override\n    public boolean exists(Integer id) {\n        return id != null && em.find(type, id) != null;\n    }\n}\n","id":7},{"name":"CheckPasswordForm","group":4,"description":"<nobr>Package: sit.ear.semestral.UnitTests</nobr>","sourcecode":"/*\n * A set of tests designed to check username errors at login/registration\n */\npackage sit.ear.semestral.UnitTests;\n\nimport org.junit.AfterClass;\nimport static org.junit.Assert.assertEquals;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\n/**\n * This is a template prepared to test a password form and its possible invalid inputs\n * @author Szeles Marek\n */\npublic class CheckPasswordForm {\n    \n    @BeforeClass\n    public static void beforeClass() {\n    }\n\n    @AfterClass\n    public static void afterClass() {\n    }\n\n \n    /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank password returns the desired \n     * error message.\n     */\n    /*\n    @Test\n    public void checkPassword_emptyBoth_test(){\n        String expectedResult = \"You need to choose your password!\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"\", \"\");        \n        assertEquals(expectedResult,realResult);        \n    }\n    */\n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank password returns the desired \n     * error message.\n     */\n     /*\n    @Test\n    public void checkPassword_emptyFirst_test(){\n        String expectedResult = \"You need to choose your password!\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"\", \"askjdfhaslkfja\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank confirm password field returns \n     * the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_emptySecond_test(){\n        String expectedResult = \"You need to re-enter your password to proceed.\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"asdfasdasdff\", \"\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass password and confirm password fields \n     * with different values returns the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_bothDifferent_test(){\n        String expectedResult = \"You need to re-enter your password to proceed.\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"asdfasdfasdf\", \"fsadfsdfadsf\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass password shorter than 8 characters\n     * returns the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_shorterThan8_test(){\n        String expectedResult = \"Password too short! Minimum: 8, Given: 2\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"as\", \"askjdfhaslkfja\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a valid password request succeeds.\n     */\n     /*\n    @Test\n    public void checkPassword_bothTheSame_test(){\n        String expectedResult = \"OK\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"lolololo\", \"lolololo\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n}\n","id":8},{"name":"GenericDao","group":2,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport java.util.Collection;\nimport java.util.List;\n\n\n\n/**\n * Base interface for data access objects.\n */\npublic interface GenericDao&lt;T&gt; {\n    /**\n     * Finds entity instance with the specified identifier.\n     *\n     * @param id Identifier\n     * @return Entity instance or {@code null} if no such instance exists\n     */\n    T find(Integer id);\n\n    /**\n     * Finds all instances of the specified class.\n     *\n     * @return List of instances, possibly empty\n     */\n    List&lt;T&gt; findAll();\n\n    /**\n     * Persists the specified entity.\n     *\n     * @param entity Entity to persist\n     */\n    void persist(T entity);\n\n    /**\n     * Persists the specified instances.\n     *\n     * @param entities Entities to persist\n     */\n    void persist(Collection&lt;T&gt; entities);\n\n    /**\n     * Updates the specified entity.\n     *\n     * @param entity Entity to update\n     * @return The updated instance\n     */\n    T update(T entity);\n\n    /**\n     * Removes the specified entity.\n     *\n     * @param entity Entity to remove\n     */\n    void remove(T entity);\n\n    /**\n     * Deletes the specified instances.\n     * &lt;p&gt;\n     * If any of the entities does not exist, it is skipped and the removal continues.\n     *\n     * @param entities Entities to remove\n     */\n    void remove(Collection&lt;T&gt; entities);\n\n    /**\n     * Checks whether an entity with the specified id exists (and has the type managed by this DAO).\n     *\n     * @param id Entity identifier\n     * @return {@literal true} if entity exists, {@literal false} otherwise\n     */\n    boolean exists(Integer id);\n}\n","id":9},{"name":"EmployeeController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Employee;\nimport system.dao.EmployeeDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@RestController\n@RequestMapping(\"/employee\")\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeDao employeeDao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Employee&gt; getAll() {\n        return employeeDao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Employee skill) {\n        employeeDao.persist(skill);\n    }\n\n}\n","id":10},{"name":"Role","group":3,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\nimport java.io.Serializable;\n\n/**\n * Created by Krystof on 26.08.2016.\n */\n\npublic enum Role {\n    ADMIN_ROLE, USER_ROLE, ;\n\n}\n","id":11},{"name":"Project","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport java.util.Date;\nimport java.util.Set;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@Entity()\npublic class Project {\n    @Column()\n    private String name;\n\n    @Column()\n    private String description;\n\n    @Column()\n    private Set&lt;String&gt; goals;\n\n    @Column()\n    private Date startOfProject;\n\n    @Column()\n    private Date endOfProject;\n\n}\n","id":12},{"name":"Experience","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@Entity\npublic class Experience {\n\n    @Column()\n    private String name;\n\n    @Column()\n    private Date from;\n\n    @Column()\n    private Date to;\n\n    @Column()\n    private String note;\n}\n","id":13},{"name":"Skill","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\nimport system.business.enums.SkillProfficiency;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n@Entity\npublic class Skill {\n\n    @Column()\n    private String name;\n\n    @Enumerated()\n    private SkillProfficiency profficiency;\n\n}\n","id":14},{"name":"Employee","group":1,"description":"<nobr>Package: system.business</nobr><br/><br/>One to one relations:<br/><nobr>One to one relation to User</nobr><br/><nobr>One to one relation to Position</nobr><br/><br/>One to many relations:<br/><nobr>One to many relation to Degree</nobr><br/><nobr>One to many relation to Skill</nobr><br/><nobr>One to many relation to Experience</nobr><br/><nobr>One to many relation to UserProject</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to Office</nobr><br/><nobr>Many to one relation to Address</nobr><br/><br/>Many to many relations:<br/><nobr>Many to many relation to Employee</nobr>","sourcecode":"package system.business;\n\nimport system.business.enums.User;\n\nimport javax.persistence.*;\nimport javax.swing.text.Position;\nimport java.util.Set;\n\n@NamedQueries({\n        @NamedQuery(name = \"Employee.findByName\",\n        query = \"SELECT l FROM Employee l WHERE LOWER(l.firstName) = :firstName AND LOWER(l.lastName) = :lastName\"),\n\n        @NamedQuery(name = \"Employee.findAll\", query = \"SELECT l FROM Employee l\")\n})\n@Entity\npublic class Employee {\n\n    @Column()\n    String firstName;\n\n    @Column()\n    String lastName;\n\n    @Column()\n    int birthYear;\n\n    @Column\n    private String email;\n\n    @Column\n    private String note;\n\n    @Column\n    private int phoneNumber;\n\n    @OneToOne\n    @JoinColumn(name=\"USER_ID\")\n    private User user;\n\n    @ManyToMany()\n    @JoinTable(name = \"EMPLOYEE_EMPLOYEE\",\n            joinColumns = @JoinColumn(name = \"EMPLOYEE_ID\", referencedColumnName = \"ID\"),\n            inverseJoinColumns = @JoinColumn(name = \"MANAGER_ID\", referencedColumnName = \"ID\")\n    )\n    private Set&lt;Employee&gt; managers;\n\n    @OneToMany(mappedBy = \"Employee\")\n    private Set&lt;Degree&gt; degrees;\n\n\n    @OneToOne\n    @JoinColumn(name=\"POSITION_ID\")\n    private Set&lt;Position&gt; positions;\n\n    @OneToMany(mappedBy = \"Employee\")\n    private Set&lt;Skill&gt; skills;\n\n    @ManyToOne()\n    @JoinColumn(name=\"OFFICE_ID\")\n    private Office office;\n\n    @ManyToOne()\n    @JoinTable(name = \"ADDRESS_ID\")\n    private Address address;\n\n    @OneToMany(mappedBy = \"Employee\")\n    private Set&lt;Experience&gt; experiences;\n\n    @OneToMany(mappedBy = \"Employee\")\n    private Set&lt;UserProject&gt; userProjects;\n\n\n}\n","id":15},{"name":"DegreeType","group":3,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\n/**\n * Created by Marek on 3.9.2017.\n */\npublic enum DegreeType {\n\n    BACHELOR, MASTERS, DOCTOR, PROFESSOR;\n\n}\n","id":16},{"name":"University","group":1,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@Entity\npublic class University {\n\n    @Column()\n    private String name;\n}\n","id":17},{"name":"UserProject","group":1,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to Project</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport java.util.Date;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@Entity()\npublic class UserProject {\n\n    @ManyToOne()\n    @JoinColumn(name=\"PROJECT_ID\")\n    private Project project;\n\n    @Column()\n    private String role;\n\n    @Column()\n    private Date start;\n\n    @Column()\n    private Date end;\n\n}\n","id":18},{"name":"SkillProfficiency","group":3,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\nimport java.io.Serializable;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\npublic enum SkillProfficiency {\n    BEGINNER, INTERMEDIATE, PROFFICIENT, ADVANCED, MASTER ;\n}\n","id":19}],"links":[{"source":18,"target":12,"value":1,"type":"MANY_TO_ONE"},{"source":15,"target":2,"value":1,"type":"ONE_TO_ONE"},{"source":15,"target":15,"value":1,"type":"MANY_TO_MANY"},{"source":15,"target":5,"value":1,"type":"ONE_TO_MANY"},{"source":15,"target":6,"value":1,"type":"ONE_TO_ONE"},{"source":15,"target":14,"value":1,"type":"ONE_TO_MANY"},{"source":15,"target":0,"value":1,"type":"MANY_TO_ONE"},{"source":15,"target":3,"value":1,"type":"MANY_TO_ONE"},{"source":15,"target":13,"value":1,"type":"ONE_TO_MANY"},{"source":15,"target":18,"value":1,"type":"ONE_TO_MANY"},{"source":0,"target":3,"value":1,"type":"MANY_TO_ONE"},{"source":5,"target":17,"value":1,"type":"MANY_TO_ONE"}]}
