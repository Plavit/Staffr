{"nodes":[{"name":"DefaultAuthenticationProvider","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.BadCredentialsException;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.context.SecurityContextImpl;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport system.security.model.AuthenticationToken;\nimport system.security.model.UserDetails;\n\n@Service(\"defaultAuthenticationProvider\")\npublic class DefaultAuthenticationProvider implements AuthenticationProvider {\n\n    private static final Logger LOG = LoggerFactory.getLogger(DefaultAuthenticationProvider.class);\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n        final String username = authentication.getPrincipal().toString();\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Authenticating user {}\", username);\n        }\n\n        final UserDetails userDetails = (UserDetails) userDetailsService.loadUserByUsername(username);\n        final String password = (String) authentication.getCredentials();\n        if (!passwordEncoder.matches(password, userDetails.getPassword())) {\n            throw new BadCredentialsException(\"Provided credentials don't match.\");\n        }\n        userDetails.eraseCredentials(); // Don't pass credentials around in the user details object\n        final AuthenticationToken token = new AuthenticationToken(userDetails.getAuthorities(), userDetails);\n        token.setAuthenticated(true);\n        token.setDetails(userDetails);\n\n        final SecurityContext context = new SecurityContextImpl();\n        context.setAuthentication(token);\n        SecurityContextHolder.setContext(context);\n        return token;\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; aClass) {\n        return UsernamePasswordAuthenticationToken.class.isAssignableFrom(aClass) ||\n                AuthenticationToken.class.isAssignableFrom(aClass);\n    }\n}\n","id":0},{"name":"AuthenticationToken","group":2,"description":"<nobr>Package: system.security.model</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security.model;\n\nimport org.springframework.security.authentication.AbstractAuthenticationToken;\nimport org.springframework.security.core.GrantedAuthority;\n\nimport java.security.Principal;\nimport java.util.Collection;\n\npublic class AuthenticationToken extends AbstractAuthenticationToken implements Principal {\n\n    private UserDetails userDetails;\n\n    public AuthenticationToken(Collection&lt;? extends GrantedAuthority&gt; authorities, UserDetails userDetails) {\n        super(authorities);\n        this.userDetails = userDetails;\n        super.setAuthenticated(true);\n        super.setDetails(userDetails);\n    }\n\n    @Override\n    public Object getCredentials() {\n        return userDetails.getPassword();\n    }\n\n    @Override\n    public Object getPrincipal() {\n        return userDetails;\n    }\n}\n","id":1},{"name":"Address","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>One to many relations:<br/><nobr>One to many relation to User</nobr><br/><nobr>One to many relation to Office</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@NamedQueries({\n        @NamedQuery(name = \"Address.findAll\", query = \"SELECT l FROM Address l\")\n})\n\n@Entity()\npublic class Address  extends AbstractBusinessObject{\n\n    @Column()\n    private String country;\n\n    @Column()\n    private String city;\n\n    @Column()\n    private int psc;\n\n    @Column()\n    private String street;\n\n    @Column()\n    private String cp;\n\n    @OneToMany(mappedBy = \"address\")\n    private Set&lt;User&gt; users;\n\n    @OneToMany(mappedBy = \"address\")\n    private Set&lt;Office&gt; offices;\n\n    public Address() {\n\n    }\n\n    public String getCountry() {\n        return country;\n    }\n\n    public void setCountry(String country) {\n        this.country = country;\n    }\n\n    public String getCity() {\n        return city;\n    }\n\n    public void setCity(String city) {\n        this.city = city;\n    }\n\n    public int getPsc() {\n        return psc;\n    }\n\n    public void setPsc(int psc) {\n        this.psc = psc;\n    }\n\n    public String getStreet() {\n        return street;\n    }\n\n    public void setStreet(String street) {\n        this.street = street;\n    }\n\n    public String getCp() {\n        return cp;\n    }\n\n    public void setCp(String cp) {\n        this.cp = cp;\n    }\n\n    public Set&lt;User&gt; getEmployees() {\n        return users;\n    }\n\n    public void setEmployees(Set&lt;User&gt; users) {\n        this.users = users;\n    }\n\n    public Set&lt;Office&gt; getOffices() {\n        return offices;\n    }\n\n    public void setOffices(Set&lt;Office&gt; offices) {\n        this.offices = offices;\n    }\n}\n","id":2},{"name":"BaseDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.PersistenceException;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\npublic abstract class BaseDao&lt;T&gt; implements GenericDao&lt;T&gt; {\n\n    @PersistenceContext\n    EntityManager em;\n\n    protected final Class&lt;T&gt; type;\n\n    protected BaseDao(Class&lt;T&gt; type) {\n        this.type = type;\n    }\n\n    //    @Transactional(readOnly = true)\n    @Override\n    public T find(Integer id) {\n        Objects.requireNonNull(id);\n        return em.find(type, id);\n    }\n\n    //    @Transactional(readOnly = true)\n    @Override\n    public List&lt;T&gt; findAll() {\n        try {\n            return em.createQuery(\"SELECT e FROM \" + type.getSimpleName() + \" e\", type).getResultList();\n        } finally {\n            em.close();\n        }\n    }\n\n    //    @Transactional\n    @Override\n    public void persist(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            em.persist(entity);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    //    @Transactional\n    @Override\n    public void persist(Collection&lt;T&gt; entities) {\n        Objects.requireNonNull(entities);\n        if (entities.isEmpty()) {\n            return;\n        }\n        try {\n            entities.forEach(this::persist);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    //    @Transactional\n    @Override\n    public T update(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            return em.merge(entity);\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    //    @Transactional\n    @Override\n    public void remove(T entity) {\n        Objects.requireNonNull(entity);\n        try {\n            final T toRemove = em.merge(entity);\n            if (toRemove != null) {\n                em.remove(toRemove);\n            }\n        } catch (RuntimeException e) {\n            throw new PersistenceException(e);\n        }\n    }\n\n    //    @Transactional\n    @Override\n    public void remove(Collection&lt;T&gt; entities) {\n        Objects.requireNonNull(entities);\n        if (entities.isEmpty()) {\n            return;\n        }\n        entities.forEach(this::remove);\n    }\n\n    //    @Transactional(readOnly = true)\n    @Override\n    public boolean exists(Integer id) {\n        return id != null && em.find(type, id) != null;\n    }\n}\n","id":3},{"name":"CsrfHeaderFilter","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\nimport org.springframework.security.web.csrf.CsrfToken;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.util.WebUtils;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Adds a CSRF token cookie to the response.\n * &lt;p&gt;\n * The cookie is then used by the client side to add a CSRF token to all subsequent request headers.\n *\n * @author ledvima1\n */\npublic class CsrfHeaderFilter extends OncePerRequestFilter {\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n                                    FilterChain filterChain) throws ServletException, IOException {\n        CsrfToken csrfToken = (CsrfToken) httpServletRequest.getAttribute(CsrfToken.class.getName());\n        if (csrfToken != null) {\n            Cookie cookie = WebUtils.getCookie(httpServletRequest, SecurityConstants.CSRF_COOKIE_NAME);\n            String token = csrfToken.getToken();\n            if (cookie == null || token != null && !token.equals(cookie.getValue())) {\n                cookie = new Cookie(SecurityConstants.CSRF_COOKIE_NAME, token);\n                cookie.setPath(SecurityConstants.COOKIE_URI);\n                httpServletResponse.addCookie(cookie);\n            }\n        }\n        filterChain.doFilter(httpServletRequest, httpServletResponse);\n    }\n}\n","id":4},{"name":"UserDetails","group":2,"description":"<nobr>Package: system.security.model</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security.model;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport system.business.enums.Role;\nimport system.business.User;\n\nimport java.util.*;\n\npublic class UserDetails implements org.springframework.security.core.userdetails.UserDetails {\n\n    private static final String DEFAULT_ROLE = \"COORDINATOR_ROLE\";\n\n    private static final String ADMIN_ROLE = \"ADMIN_ROLE\";\n\n    private User user;\n\n    protected final Set&lt;GrantedAuthority&gt; authorities;\n\n    public UserDetails(User user) {\n        Objects.requireNonNull(user);\n        this.user = user;\n        this.authorities = new HashSet&lt;&gt;();\n        if (this.user.getRole() == Role.ADMIN_ROLE) {\n            addAdminRole();\n        } else {\n            addDefaultRole();\n        }\n    }\n\n    public UserDetails(User user, Collection&lt;GrantedAuthority&gt; authorities) {\n        Objects.requireNonNull(user);\n        Objects.requireNonNull(authorities);\n        this.user = user;\n        this.authorities = new HashSet&lt;&gt;();\n        addDefaultRole();\n        this.authorities.addAll(authorities);\n    }\n\n    private void addDefaultRole() {\n        authorities.add(new SimpleGrantedAuthority(DEFAULT_ROLE));\n    }\n\n    private void addAdminRole() {\n        authorities.add(new SimpleGrantedAuthority(ADMIN_ROLE));\n    }\n\n    public void eraseCredentials() {\n        user.setPassword(null);\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return Collections.unmodifiableCollection(authorities);\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUserName();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return false;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    public User getUser() {\n        return user;\n    }\n}\n","id":5},{"name":"ExperienceController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Experience;\nimport system.business.Project;\nimport system.dao.ExperienceDao;\nimport system.dao.ProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/experience\")\npublic class ExperienceController {\n\n    @Autowired\n    private ExperienceDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Experience&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Experience experience) {\n        dao.persist(experience);\n    }\n}\n","id":6},{"name":"WebAppConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.config;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.converter.FormHttpMessageConverter;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.http.converter.StringHttpMessageConverter;\nimport org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\nimport org.springframework.web.multipart.MultipartResolver;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.JstlView;\n\nimport java.nio.charset.Charset;\nimport java.util.List;\n\n/**\n * This class configures the web services of our application, it tells spring where to find static resources like JS files, so that\n * it can optimize access to them (e.g. skip authentication) and how to handle coversion of JSON to Java and vice versa.\n * &lt;p&gt;\n * This setup is usually done once and then copied into new projects.\n */\n@Configuration\n@EnableWebMvc\n@Import({RestConfig.class, SecurityConfig.class})\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/resources/\");\n        registry.addResourceHandler(\"/js/**\").addResourceLocations(\"/js/\");\n    }\n\n    @Override\n    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n        configurer.enable();\n    }\n\n    @Bean\n    public InternalResourceViewResolver setupViewResolver() {\n        InternalResourceViewResolver resolver = new InternalResourceViewResolver();\n        resolver.setViewClass(JstlView.class);\n        resolver.setPrefix(\"/WEB-INF/\");\n        resolver.setSuffix(\".html\");\n        return resolver;\n    }\n\n    @Bean(name = \"multipartResolver\")\n    public MultipartResolver multipartResolver() {\n        return new StandardServletMultipartResolver();\n    }\n\n    @Override\n    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {\n        final MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n        final ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        converter.setObjectMapper(objectMapper);\n        converters.add(converter);\n        final FormHttpMessageConverter formHttpMessageConverter = new FormHttpMessageConverter();\n        formHttpMessageConverter.setMultipartCharset(Charset.forName(\"UTF-8\"));\n//        MediaType mediaType = new MediaType(\"application\",\"x-www-form-urlencoded\", Charset.forName(\"UTF-8\"));\n//        converter.setSupportedMediaTypes(Arrays.asList(mediaType));\n        converters.add(formHttpMessageConverter);\n//        final MessageConv\n        final StringHttpMessageConverter stringConverter = new StringHttpMessageConverter(Charset.forName(\"UTF-8\"));\n        converters.add(stringConverter);\n        super.configureMessageConverters(converters);\n    }\n}\n","id":7},{"name":"SkillProfficiency","group":7,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\nimport java.io.Serializable;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\npublic enum SkillProfficiency {\n    BEGINNER, INTERMEDIATE, PROFFICIENT, ADVANCED, MASTER ;\n}\n","id":8},{"name":"Status","group":7,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\n/**\n * Created by krystof on 9/24/17.\n */\npublic enum Status {\n    ACTIVE, INACTIVE, RETIRED, MATERNITY_LEAVE\n}\n","id":9},{"name":"Degree","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to User</nobr><br/><nobr>Many to one relation to University</nobr>","sourcecode":"package system.business;\n\nimport system.business.enums.DegreeType;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@NamedQueries({\n        @NamedQuery(name = \"Degree.findByName\",\n                query = \"SELECT l FROM Degree l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"Degree.findAll\", query = \"SELECT l FROM Degree l\")\n})\n\n@Entity\npublic class Degree extends AbstractBusinessObject {\n\n    @Enumerated()\n    private DegreeType type;\n\n    @Column()\n    private String name;\n\n    @Column(name = \"startingDate\")\n    private Date from;\n\n    @Column(name = \"endingDate\")\n    private Date to;\n\n    public Degree() {\n\n    }\n\n    @ManyToOne()\n    @JoinColumn(name = \"EMPLOYEE_ID\")\n    private User user;\n\n    @ManyToOne()\n    @JoinColumn(name=\"UNIVERSITY_ID\")\n    private University university;\n\n    public DegreeType getType() {\n        return type;\n    }\n\n    public void setType(DegreeType type) {\n        this.type = type;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Date getFrom() {\n        return from;\n    }\n\n    public void setFrom(Date from) {\n        this.from = from;\n    }\n\n    public Date getTo() {\n        return to;\n    }\n\n    public void setTo(Date to) {\n        this.to = to;\n    }\n\n    public User getEmployee() {\n        return user;\n    }\n\n    public void setEmployee(User user) {\n        this.user = user;\n    }\n\n    public University getUniversity() {\n        return university;\n    }\n\n    public void setUniversity(University university) {\n        this.university = university;\n    }\n}\n","id":10},{"name":"Position","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to User</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n@NamedQueries({\n        @NamedQuery(name = \"Position.findByName\",\n                query = \"SELECT l FROM Position l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"Position.findAll\", query = \"SELECT l FROM Position l\")\n})\n\n@Entity\npublic class Position extends AbstractBusinessObject {\n\n    private String name;\n\n    @ManyToOne\n    @JoinColumn(name=\"USER_ID\", nullable=false)\n    public User user;\n\n    public Position() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n","id":11},{"name":"PositionDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Position;\nimport system.business.Project;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class PositionDaoTest extends BaseDaoTestRunner {\n\n    @Autowired\n    private PositionDao positionDao;\n\n    @Test\n    public void findByName() throws Exception {\n        final Position position = new Position();\n        position.setName(\"First Officer\");\n        positionDao.persist(position);\n        final Position result = positionDao.findByName(position.getName());\n        assertNotNull(result);\n        assertEquals(position.getId(), result.getId());\n    }\n\n}\n","id":12},{"name":"SecurityUtils","group":8,"description":"<nobr>Package: system.service.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.service.security;\n\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport system.business.User;\nimport system.security.model.UserDetails;\n\n@Service\npublic class SecurityUtils {\n\n    /**\n     * Gets the currently authenticated user.\n     *\n     * @return Current user\n     */\n    public User getCurrentUser() {\n        final SecurityContext context = SecurityContextHolder.getContext();\n        assert context != null;\n        final UserDetails userDetails = (UserDetails) context.getAuthentication().getDetails();\n        return userDetails.getUser();\n    }\n\n    /**\n     * Gets details of the currently authenticated user.\n     *\n     * @return Currently authenticated user details or null, if no one is currently authenticated\n     */\n    public UserDetails getCurrentUserDetails() {\n        final SecurityContext context = SecurityContextHolder.getContext();\n        if (context.getAuthentication() != null && context.getAuthentication().getDetails() instanceof UserDetails) {\n            return (UserDetails) context.getAuthentication().getDetails();\n        } else {\n            return null;\n        }\n    }\n}\n","id":13},{"name":"GenericDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Base interface for data access objects.\n */\npublic interface GenericDao&lt;T&gt; {\n    /**\n     * Finds entity instance with the specified identifier.\n     *\n     * @param id Identifier\n     * @return Entity instance or {@code null} if no such instance exists\n     */\n    T find(Integer id);\n\n    /**\n     * Finds all instances of the specified class.\n     *\n     * @return List of instances, possibly empty\n     */\n    List&lt;T&gt; findAll();\n\n    /**\n     * Persists the specified entity.\n     *\n     * @param entity Entity to persist\n     */\n    void persist(T entity);\n\n    /**\n     * Persists the specified instances.\n     *\n     * @param entities Entities to persist\n     */\n    void persist(Collection&lt;T&gt; entities);\n\n    /**\n     * Updates the specified entity.\n     *\n     * @param entity Entity to update\n     * @return The updated instance\n     */\n    T update(T entity);\n\n    /**\n     * Removes the specified entity.\n     *\n     * @param entity Entity to remove\n     */\n    void remove(T entity);\n\n    /**\n     * Deletes the specified instances.\n     * &lt;p&gt;\n     * If any of the entities does not exist, it is skipped and the removal continues.\n     *\n     * @param entities Entities to remove\n     */\n    void remove(Collection&lt;T&gt; entities);\n\n    /**\n     * Checks whether an entity with the specified id exists (and has the type managed by this DAO).\n     *\n     * @param id Entity identifier\n     * @return {@literal true} if entity exists, {@literal false} otherwise\n     */\n    boolean exists(Integer id);\n}\n","id":14},{"name":"ProjectService","group":9,"description":"<nobr>Package: system.service.repository</nobr>","sourcecode":"package system.service.repository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport system.business.Project;\nimport system.dao.GenericDao;\nimport system.dao.ProjectDao;\n\n@Service\npublic class ProjectService extends AbstractRepositoryService&lt;Project&gt; {\n\n    private final ProjectDao dao;\n\n    @Autowired\n    public ProjectService(ProjectDao dao) {\n        this.dao = dao;\n    }\n\n    @Override\n    protected GenericDao&lt;Project&gt; getPrimaryDao() {\n        return dao;\n    }\n}\n","id":15},{"name":"UserProjectSearchService","group":10,"description":"<nobr>Package: system.service.data</nobr>","sourcecode":"package system.service.data;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport system.business.*;\nimport system.business.UserProject;\nimport system.dao.ProjectDao;\nimport system.dao.UserProjectDao;\n\nimport java.util.Date;\nimport java.util.LinkedList;\nimport java.util.List;\n\n@Service\npublic class UserProjectSearchService {\n\n    @Autowired\n    UserProjectDao userProjectDao;\n\n    @Autowired\n    ProjectDao projectDao;\n\n    public List&lt;Project&gt; getUsersProjectsFromDate(int userId, Date start) {\n        List&lt;Project&gt; ret = new LinkedList&lt;&gt;();\n        List&lt;UserProject&gt; upList = userProjectDao.findByUserAndStartingDate(userId, start);\n        for (UserProject up : upList) {\n            ret.add(projectDao.find(up.getId()));\n        }\n        return ret;\n    }\n}\n","id":16},{"name":"AuthenticationFailure","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.stereotype.Service;\nimport system.security.model.LoginStatus;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Returns info about authentication failure.\n */\n@Service\npublic class AuthenticationFailure implements AuthenticationFailureHandler {\n\n    private static final Logger LOG = LoggerFactory.getLogger(AuthenticationFailure.class);\n\n    @Autowired\n    private ObjectMapper mapper;\n\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n                                        AuthenticationException e) throws IOException, ServletException {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Login failed for user {}.\", httpServletRequest.getParameter(SecurityConstants.USERNAME_PARAM));\n        }\n        final LoginStatus status = new LoginStatus(false, false, null, e.getMessage());\n        mapper.writeValue(httpServletResponse.getOutputStream(), status);\n    }\n}\n","id":17},{"name":"SkillDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.Skill;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class SkillDao extends BaseDao&lt;Skill&gt; {\n\n    protected SkillDao() {\n        super(Skill.class);\n    }\n\n    @Transactional(readOnly = true)\n    public Skill findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"Skill.findByName\", Skill.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n","id":18},{"name":"ProjectController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Project;\nimport system.dao.ProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/project\")\npublic class ProjectController {\n\n    @Autowired\n    private ProjectDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Project&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Project project) {\n        dao.persist(project);\n    }\n}\n","id":19},{"name":"DegreeController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Degree;\nimport system.business.Project;\nimport system.dao.DegreeDao;\nimport system.dao.ProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/degree\")\npublic class DegreeController {\n\n    @Autowired\n    private DegreeDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Degree&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Degree degree) {\n        dao.persist(degree);\n    }\n}\n","id":20},{"name":"BaseDaoTestRunner","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.dao;\n\n\nimport org.junit.runner.RunWith;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.config.PersistenceConfig;\n\n/**\n * This class configures our tests so that we can use the Spring features in them - e.g. autowiring.\n * &lt;p&gt;\n * It is often good to extract this setup into a common superclass, so that we need not set the configuration on every test class.\n */\n@RunWith(SpringJUnit4ClassRunner.class) // Tell JUnit to use Spring's test runner\n/*\nWhich configuration classes should Spring load. This also means that for example service classes and REST controllers\nwon't be available for autowiring in tests inheriting from this class.\n */\n@ContextConfiguration(classes = {PersistenceConfig.class})\n// Reset the Spring context after each tests, recreating all the beans\n@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n//extend the transactions to whole tests in order to rollback the changes after each test\n// Se also http://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#testcontext-tx\n@Transactional(transactionManager = \"txManager\")\npublic abstract class BaseDaoTestRunner {\n}\n","id":21},{"name":"HttpAuthenticationEntryPoint","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Returns 401 Unauthorized response when the user tries to access a resource and is not logged in.\n */\n@Component\npublic class HttpAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n                         AuthenticationException e) throws IOException, ServletException {\n        httpServletResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Authentication required.\");\n    }\n}\n","id":22},{"name":"AddressController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Address;\nimport system.business.Project;\nimport system.dao.AddressDao;\nimport system.dao.ProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/address\")\npublic class AddressController {\n\n    @Autowired\n    private AddressDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Address&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Address address) {\n        dao.persist(address);\n    }\n}\n","id":23},{"name":"Role","group":7,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\nimport java.io.Serializable;\n\n/**\n * Created by Krystof on 26.08.2016.\n */\n\npublic enum Role {\n    ADMIN_ROLE, USER_ROLE, ;\n\n}\n","id":24},{"name":"PositionDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.Position;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class PositionDao extends BaseDao&lt;Position&gt;{\n\n    protected PositionDao() {\n        super(Position.class);\n    }\n\n//    @Transactional(readOnly = true)\n    public Position findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"Position.findByName\", Position.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n\n","id":25},{"name":"Project","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>One to many relations:<br/><nobr>One to many relation to UserProject</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Date;\nimport java.util.Set;\n\n/**\n * Created by krystof on 9/3/17.\n */\n@NamedQueries({\n        @NamedQuery(name = \"Project.findByName\",\n                query = \"SELECT l FROM Project l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"Project.findAll\", query = \"SELECT l FROM Project l\")\n})\n\n@Entity()\npublic class Project extends AbstractBusinessObject {\n\n    private String name;\n\n\n    private String description;\n\n\n    private Set&lt;String&gt; goals;\n\n\n    private Date startOfProject;\n\n\n    private Date endOfProject;\n\n    @OneToMany(mappedBy = \"project\",cascade = CascadeType.PERSIST)\n    private Set&lt;UserProject&gt; userProject;\n\n    public Project() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public Set&lt;String&gt; getGoals() {\n        return goals;\n    }\n\n    public void setGoals(Set&lt;String&gt; goals) {\n        this.goals = goals;\n    }\n\n    public Date getStartOfProject() {\n        return startOfProject;\n    }\n\n    public void setStartOfProject(Date startOfProject) {\n        this.startOfProject = startOfProject;\n    }\n\n    public Date getEndOfProject() {\n        return endOfProject;\n    }\n\n    public void setEndOfProject(Date endOfProject) {\n        this.endOfProject = endOfProject;\n    }\n\n    public Set&lt;UserProject&gt; getUserProject() {\n        return userProject;\n    }\n\n    public void setUserProject(Set&lt;UserProject&gt; userProject) {\n        this.userProject = userProject;\n    }\n}\n","id":26},{"name":"Experience","group":3,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Date;\nimport java.util.Set;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@Entity\npublic class Experience extends Skill{\n\n\n    @Column(name = \"startingFrom\")\n    private Date from;\n\n    @Column(name = \"endingDate\")\n    private Date to;\n\n    public Experience() {\n\n    }\n    public Date getFrom() {\n        return from;\n    }\n\n    public void setFrom(Date from) {\n        this.from = from;\n    }\n\n    public Date getTo() {\n        return to;\n    }\n\n    public void setTo(Date to) {\n        this.to = to;\n    }\n\n}\n","id":27},{"name":"University","group":3,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\n@NamedQueries({\n        @NamedQuery(name = \"University.findByName\",\n                query = \"SELECT l FROM University l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"University.findAll\", query = \"SELECT l FROM University l\")\n})\n\n@Entity\npublic class University extends AbstractBusinessObject {\n\n    @Column()\n    private String name;\n\n    public University() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n","id":28},{"name":"OfficeTest","group":3,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\n/**\n * Created by Marek on 1.10.2017.\n */\npublic class OfficeTest {\n    Office o;\n    String tstOffice;\n\n    @Before\n    public void setUp() throws Exception {\n        o = new Office();\n        tstOffice=\"Brno\";\n        o.setName(tstOffice);\n\n    }\n\n    @After\n    public void tearDown() throws Exception {\n\n    }\n\n    @Test\n    public void getOfficeName() throws Exception {\n        assert (o.getName()== tstOffice);\n    }\n\n    @Test\n    public void setOfficeName() throws Exception {\n        o.setName(\"Lisbon\");\n        assert (o.getName()==\"Lisbon\");\n        o.setName(tstOffice);\n    }\n\n}\n","id":29},{"name":"UserProjectSearchServiceTest","group":10,"description":"<nobr>Package: system.service.data</nobr>","sourcecode":"package system.service.data;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.*;\nimport system.config.AppConfig;\nimport system.config.PersistenceConfig;\nimport system.config.ServiceConfig;\nimport system.service.repository.*;\n\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport static org.junit.Assert.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {ServiceConfig.class})\n@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)\n@Transactional(transactionManager = \"txManager\")\npublic class UserProjectSearchServiceTest {\n\n    @Autowired\n    private ProjectService projectService;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private UserProjectSearchService userProjectSearchService;\n\n//    final Project p = new Project();\n//    final User u = new User();\n//    final UserProject up = new UserProject();\n\n    @Before\n    public void setUp() throws Exception {\n\n//        up.setProject(p);\n//        up.setEmployee(u);\n//\n//        Set&lt;UserProject&gt; upSet = new HashSet&lt;&gt;();\n//\n//        upSet.add(up);\n//\n//        p.setName(\"Project1\");\n//        p.setDescription(\"Test project\");\n//\n//        projectService.persist(p);\n//\n//        u.setUserProjects(upSet);\n//\n//        userService.persist(u);\n    }\n\n    @Test\n    public void getUsersProjectsFromDate() throws Exception {\n//        List&lt;Project&gt; projects = userProjectSearchService.getUsersProjectsFromDate(u.getId(),new Date(0,0,0));\n//        assertEquals(p,projects.get(0));\n    }\n\n}\n","id":30},{"name":"PersistenceConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"package system.config;\n\nimport com.jolbox.bonecp.BoneCPDataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.*;\nimport org.springframework.core.env.Environment;\nimport org.springframework.orm.jpa.JpaTransactionManager;\nimport org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\nimport org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport javax.persistence.EntityManagerFactory;\nimport javax.sql.DataSource;\nimport java.util.Properties;\n\n@Configuration\n@PropertySources(\n        {@PropertySource(\"classpath:jpa.properties\"),\n                @PropertySource(\"classpath:jdbc.properties\")})\n@EnableTransactionManagement    // Enable use of the @Transactional annotation\n@ComponentScan(basePackages = \"system.dao\")\n@EnableAspectJAutoProxy(proxyTargetClass = true)\npublic class PersistenceConfig {\n\n    @Autowired\n    private Environment environment;\n\n    @Bean\n    public DataSource dataSource() {\n        final BoneCPDataSource ds = new BoneCPDataSource();\n        ds.setDriverClass(environment.getRequiredProperty(\"jdbc.driverClassName\"));\n        ds.setJdbcUrl(environment.getRequiredProperty(\"jdbc.url\"));\n        ds.setUsername(environment.getRequiredProperty(\"jdbc.username\"));\n        ds.setPassword(environment.getRequiredProperty(\"jdbc.password\"));\n        return ds;\n    }\n\n    @Bean\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource ds) {\n        final LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();\n        emf.setDataSource(ds);\n        emf.setJpaVendorAdapter(new EclipseLinkJpaVendorAdapter());\n        emf.setPackagesToScan(\"system.business\"); // Look for entities in this package\n\n        final Properties props = new Properties();\n        props.setProperty(\"databasePlatform\", environment.getRequiredProperty(\"jpa.platform\"));\n        props.setProperty(\"generateDdl\", \"true\");\n        props.setProperty(\"showSql\", \"true\");\n        props.setProperty(\"eclipselink.weaving\", \"static\");\n        props.setProperty(\"eclipselink.ddl-generation\", \"drop-and-create-tables\");\n        emf.setJpaProperties(props);\n        return emf;\n    }\n\n    @Bean(name = \"txManager\")\n    JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {\n        JpaTransactionManager transactionManager = new JpaTransactionManager();\n        transactionManager.setEntityManagerFactory(entityManagerFactory);\n        return transactionManager;\n    }\n}\n","id":31},{"name":"ExperienceDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.Experience;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class ExperienceDao extends BaseDao&lt;Experience&gt;{\n    protected ExperienceDao() {\n        super(Experience.class);\n    }\n}\n","id":32},{"name":"AbstractRepositoryService","group":9,"description":"<nobr>Package: system.service.repository</nobr>","sourcecode":"package system.service.repository;\n\nimport org.springframework.transaction.annotation.Transactional;\nimport system.dao.GenericDao;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Objects;\n\npublic abstract class AbstractRepositoryService&lt;T&gt; implements RepositoryService&lt;T&gt; {\n\n    protected abstract GenericDao&lt;T&gt; getPrimaryDao();\n\n    @Transactional(readOnly = true)\n    @Override\n    public List&lt;T&gt; findAll() {\n        final List&lt;T&gt; result = getPrimaryDao().findAll();\n        result.forEach(this::postLoad);\n        return result;\n    }\n\n    @Transactional(readOnly = true)\n    @Override\n    public T find(Integer id) {\n        final T result = getPrimaryDao().find(id);\n        postLoad(result);\n        return result;\n    }\n\n    @Transactional\n    @Override\n    public void persist(T instance) {\n        Objects.requireNonNull(instance);\n        prePersist(instance);\n        getPrimaryDao().persist(instance);\n    }\n\n    @Transactional\n    @Override\n    public void persist(Collection&lt;T&gt; instances) {\n        Objects.requireNonNull(instances);\n        instances.forEach(this::prePersist);\n        getPrimaryDao().persist(instances);\n    }\n\n    @Transactional\n    @Override\n    public void update(T instance) {\n        Objects.requireNonNull(instance);\n        preUpdate(instance);\n        getPrimaryDao().update(instance);\n        postUpdate();\n    }\n\n    @Transactional\n    @Override\n    public void remove(T instance) {\n        getPrimaryDao().remove(instance);\n    }\n\n    @Transactional(readOnly = true)\n    @Override\n    public boolean exists(Integer id) {\n        return getPrimaryDao().exists(id);\n    }\n\n    // The following methods are hooks intended to be overridden by subclasses, so that the main CRUD methods do not have to be modified\n\n    void prePersist(T instance) {\n        // Do nothing, intended for overriding\n    }\n\n    void preUpdate(T instance) {\n        // Do nothing, intended for overriding\n    }\n\n    void postUpdate() {\n        // Do nothing, intended for overriding\n    }\n\n    void postLoad(T instance) {\n        // Do nothing, intended for overriding\n    }\n}\n","id":33},{"name":"AuthenticationSuccess","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\nimport org.springframework.stereotype.Service;\nimport system.security.model.LoginStatus;\nimport system.security.model.UserDetails;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * Writes basic login/logout information into the response.\n */\n@Service\npublic class AuthenticationSuccess implements AuthenticationSuccessHandler, LogoutSuccessHandler {\n\n    private static final Logger LOG = LoggerFactory.getLogger(AuthenticationSuccess.class);\n\n    @Autowired\n    private ObjectMapper mapper;\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n                                        Authentication authentication) throws IOException, ServletException {\n        final String username = getUsername(authentication);\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Successfully authenticated user {}\", username);\n        }\n        final LoginStatus loginStatus = new LoginStatus(true, authentication.isAuthenticated(), username, null);\n        mapper.writeValue(httpServletResponse.getOutputStream(), loginStatus);\n    }\n\n    private String getUsername(Authentication authentication) {\n        if (authentication == null) {\n            return \"\";\n        }\n        return ((UserDetails) authentication.getPrincipal()).getUsername();\n    }\n\n    @Override\n    public void onLogoutSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse,\n                                Authentication authentication) throws IOException, ServletException {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Successfully logged out user {}\", getUsername(authentication));\n        }\n        final LoginStatus loginStatus = new LoginStatus(false, true, null, null);\n        mapper.writeValue(httpServletResponse.getOutputStream(), loginStatus);\n    }\n}\n","id":34},{"name":"UserDetailsService","group":8,"description":"<nobr>Package: system.service.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.service.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport system.business.User;\nimport system.dao.UserDao;\n\n@Service\npublic class UserDetailsService implements org.springframework.security.core.userdetails.UserDetailsService {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        final User user = userDao.findByUsername(username);\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User with username \" + username + \" not found.\");\n        }\n        return new system.security.model.UserDetails(user);\n    }\n}\n","id":35},{"name":"ExperienceDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Experience;\nimport system.business.Project;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class ExperienceDaoTest extends BaseDaoTestRunner {\n\n    @Autowired\n    private ExperienceDao experienceDao;\n\n}\n","id":36},{"name":"ProjectDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.Project;\n\nimport javax.persistence.NoResultException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n@Repository\npublic class ProjectDao extends BaseDao&lt;Project&gt; {\n\n    protected ProjectDao() {\n        super(Project.class);\n    }\n\n    @Transactional(readOnly = true)\n    public Project findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"Project.findByName\", Project.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n\n//    public List&lt;Project&gt; getAllProjectsById(List&lt;int&gt; ids){\n//        List&lt;Project&gt; ret = new LinkedList&lt;&gt;();\n//\n//        for (int id: ids) {\n//            find(id);\n//        }\n//\n//    }\n}\n","id":37},{"name":"ProjectDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Project;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class ProjectDaoTest extends BaseDaoTestRunner{\n\n    @Autowired\n    private ProjectDao projectDao;\n\n    @Test\n    public void findByName() throws Exception {\n        final Project project = new Project();\n        project.setName(\"Staffr First Project\");\n        project.setDescription(\"The bestest project in the world.\");\n        projectDao.persist(project);\n        final Project result = projectDao.findByName(project.getName());\n        assertNotNull(result);\n        assertEquals(project.getId(), result.getId());\n    }\n\n}\n","id":38},{"name":"Office","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>One to many relations:<br/><nobr>One to many relation to User</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to Address</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n\n@NamedQueries({\n        @NamedQuery(name = \"Office.findByName\",\n                query = \"SELECT l FROM Office l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"Office.findAll\", query = \"SELECT l FROM Office l\")\n})\n\n\n\n\n@Entity\npublic class Office extends AbstractBusinessObject {\n\n    @Column()\n    private String name;\n\n    @Column()\n    private String note;\n\n    @OneToMany()\n    private Set&lt;User&gt; user;\n\n    @ManyToOne()\n    @JoinColumn(name = \"ADDRESS_ID\")\n    private Address address;\n\n    public Office() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getNote() {\n        return note;\n    }\n\n    public void setNote(String note) {\n        this.note = note;\n    }\n\n    public Set&lt;User&gt; getEmployee() {\n        return user;\n    }\n\n    public void setEmployee(Set&lt;User&gt; user) {\n        this.user = user;\n    }\n\n    public Address getAddress() {\n        return address;\n    }\n\n    public void setAddress(Address address) {\n        this.address = address;\n    }\n}\n","id":39},{"name":"User","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>One to many relations:<br/><nobr>One to many relation to Degree</nobr><br/><nobr>One to many relation to Position</nobr><br/><nobr>One to many relation to Skill</nobr><br/><nobr>One to many relation to UserProject</nobr><br/><br/>Many to many relations:<br/><nobr>Many to many relation to User</nobr><br/><nobr>Many to many relation to User</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to Office</nobr><br/><nobr>Many to one relation to Address</nobr>","sourcecode":"package system.business;\n\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport system.business.enums.Role;\nimport system.business.enums.Status;\n\nimport javax.persistence.*;\nimport java.util.Set;\n\n@NamedQueries({\n        @NamedQuery(name = \"User.findByName\", query = \"SELECT l FROM User l WHERE LOWER(l.firstName) = :firstName AND LOWER(l.lastName) = :lastName\"),\n        @NamedQuery(name = \"User.findByUsername\", query = \"SELECT p FROM User p WHERE p.userName=:username\"),\n        @NamedQuery(name = \"User.deleteById\", query = \"DELETE FROM User p WHERE p.id=:id\"),\n        @NamedQuery(name = \"User.findAll\", query = \"SELECT l FROM User l\")\n})\n\n\n@Entity\n@Table(name = \"usr\")\npublic class User extends AbstractBusinessObject {\n\n    private String userName;\n    private String password;\n    private Role role;\n    private String firstName;\n    private String lastName;\n    private int birthYear;\n    private String email;\n    private String note;\n    private int phoneNumber;\n    private Status active;\n\n    @ManyToMany()\n    @JoinTable(name = \"EMPLOYEE_MANAGER\",\n            joinColumns = @JoinColumn(name = \"EMPLOYEE_ID\", referencedColumnName = \"ID\"),\n            inverseJoinColumns = @JoinColumn(name = \"MANAGER_ID\", referencedColumnName = \"ID\")\n    )\n    private Set&lt;User&gt; managers;\n\n    @ManyToMany()\n    @JoinTable(name = \"MANAGER_EMPLOYEE\",\n            joinColumns = @JoinColumn(name = \"MANAGER_ID\", referencedColumnName = \"ID\"),\n            inverseJoinColumns = @JoinColumn(name = \"EMPLOYEE_ID\", referencedColumnName = \"ID\")\n    )\n    private Set&lt;User&gt; users;\n\n    @OneToMany(mappedBy = \"user\", orphanRemoval=true)\n    private Set&lt;Degree&gt; degrees;\n\n    @OneToMany(mappedBy = \"user\", orphanRemoval=true)\n    private Set&lt;Position&gt; positions;\n\n    @OneToMany(mappedBy = \"user\", orphanRemoval=true)\n    private Set&lt;Skill&gt; skills;\n\n    @ManyToOne()\n    @JoinColumn(name = \"OFFICE_ID\")\n    private Office office;\n\n    @ManyToOne()\n    @JoinColumn(name = \"ADDRESS_ID\")\n    private Address address;\n\n    @OneToMany(mappedBy = \"user\",cascade = CascadeType.PERSIST)\n    private Set&lt;UserProject&gt; userProjects;\n\n    public User() {\n    }\n\n    public User(String userName, String password, Role role) {\n        this.userName = userName;\n        this.password = password;\n        this.role = role;\n    }\n\n    public User(String firstName, String lastName, int birthYear, String email, String note, int phoneNumber, Status active) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthYear = birthYear;\n        this.email = email;\n        this.note = note;\n        this.phoneNumber = phoneNumber;\n        this.active = active;\n    }\n\n    public User(String userName, String password, Role role, String firstName, String lastName, int birthYear, String email, String note, int phoneNumber, Status active) {\n        this.userName = userName;\n        this.password = password;\n        this.role = role;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.birthYear = birthYear;\n        this.email = email;\n        this.note = note;\n        this.phoneNumber = phoneNumber;\n        this.active = active;\n    }\n\n    public void encodePassword(PasswordEncoder encoder) {\n        if (password == null || password.isEmpty()) {\n            throw new IllegalStateException(\"Cannot encode an empty password.\");\n        }\n        this.password = encoder.encode(password);\n    }\n\n    public String getUserName() {\n        return userName;\n    }\n\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Role getRole() {\n        return role;\n    }\n\n    public void setRole(Role role) {\n        this.role = role;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    public int getBirthYear() {\n        return birthYear;\n    }\n\n    public void setBirthYear(int birthYear) {\n        this.birthYear = birthYear;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public String getNote() {\n        return note;\n    }\n\n    public void setNote(String note) {\n        this.note = note;\n    }\n\n    public int getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(int phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n\n    public Status getActive() {\n        return active;\n    }\n\n    public void setActive(Status active) {\n        this.active = active;\n    }\n\n    public Set&lt;User&gt; getManagers() {\n        return managers;\n    }\n\n    public void setManagers(Set&lt;User&gt; managers) {\n        this.managers = managers;\n    }\n\n    public Set&lt;User&gt; getUsers() {\n        return users;\n    }\n\n    public void setUsers(Set&lt;User&gt; users) {\n        this.users = users;\n    }\n\n    public Set&lt;Degree&gt; getDegrees() {\n        return degrees;\n    }\n\n    public void setDegrees(Set&lt;Degree&gt; degrees) {\n        this.degrees = degrees;\n    }\n\n    public Set&lt;Position&gt; getPositions() {\n        return positions;\n    }\n\n    public void setPositions(Set&lt;Position&gt; positions) {\n        this.positions = positions;\n    }\n\n    public Set&lt;Skill&gt; getSkills() {\n        return skills;\n    }\n\n    public void setSkills(Set&lt;Skill&gt; skills) {\n        this.skills = skills;\n    }\n\n    public Office getOffice() {\n        return office;\n    }\n\n    public void setOffice(Office office) {\n        this.office = office;\n    }\n\n    public Address getAddress() {\n        return address;\n    }\n\n    public void setAddress(Address address) {\n        this.address = address;\n    }\n\n    public Set&lt;UserProject&gt; getUserProjects() {\n        return userProjects;\n    }\n\n    public void setUserProjects(Set&lt;UserProject&gt; userProjects) {\n        this.userProjects = userProjects;\n    }\n}\n","id":40},{"name":"AbstractBusinessObject","group":3,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.MappedSuperclass;\nimport java.io.Serializable;\n\n/**\n * Created by MarekS on 26.08.2017.\n */\n\n@MappedSuperclass\npublic abstract class AbstractBusinessObject implements Serializable{\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    protected int id;\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    //TODO: implement stuff like delete here for the objects to use\n}\n","id":41},{"name":"DispatcherServletInitializer","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.config;\n\nimport org.springframework.web.context.request.RequestContextListener;\nimport org.springframework.web.filter.CharacterEncodingFilter;\nimport org.springframework.web.filter.DelegatingFilterProxy;\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\nimport javax.servlet.DispatcherType;\nimport javax.servlet.FilterRegistration;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport java.util.EnumSet;\n\n/**\n * This class is called when our project is deployed into an application server - the servers have hooks for such cases.\n * &lt;p&gt;\n * It initializes Spring context and starts building beans according to our configuration\n */\npublic class DispatcherServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    /**\n     * Notice how we are referencing the {@link AppConfig} class, which is basically the root of our application's configuration.\n     */\n    @Override\n    protected Class&lt;?&gt;[] getRootConfigClasses() {\n        return new Class&lt;?&gt;[]{AppConfig.class};\n    }\n\n    @Override\n    protected Class&lt;?&gt;[] getServletConfigClasses() {\n        return null;\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[]{\"/rest/*\"};\n    }\n\n    @Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        System.out.println(\"****** Application Context Initialization ******\");\n        initSecurityFilter(servletContext);\n        FilterRegistration.Dynamic ef = servletContext.addFilter(\"encodingFilter\", CharacterEncodingFilter.class);\n        ef.setInitParameter(\"encoding\", \"UTF-8\");\n        ef.setInitParameter(\"forceEncoding\", \"true\");\n        final EnumSet&lt;DispatcherType&gt; es = EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD);\n        ef.addMappingForUrlPatterns(es, true, \"/*\");\n        servletContext.addListener(new RequestContextListener());\n        super.onStartup(servletContext);\n    }\n\n    private void initSecurityFilter(ServletContext servletContext) {\n        FilterRegistration.Dynamic securityFilter = servletContext.addFilter(\"springSecurityFilterChain\",\n                DelegatingFilterProxy.class);\n        final EnumSet&lt;DispatcherType&gt; es = EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD);\n        securityFilter.addMappingForUrlPatterns(es, true, \"/*\");\n    }\n}\n","id":42},{"name":"SkillDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Skill;\nimport system.business.enums.SkillProfficiency;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class SkillDaoTest extends BaseDaoTestRunner{\n\n    @Autowired\n    private SkillDao skillDao;\n\n    @Test\n    public void findByName() throws Exception {\n        final Skill skill = new Skill();\n        skill.setName(\"lollygagging\");\n        skill.setProfficiency(SkillProfficiency.MASTER);\n        skillDao.persist(skill);\n        final Skill result = skillDao.findByName(skill.getName());\n        assertNotNull(result);\n        assertEquals(skill.getId(), result.getId());\n    }\n\n}\n","id":43},{"name":"DataInitializer","group":10,"description":"<nobr>Package: system.service.data</nobr>","sourcecode":"package system.service.data;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\nimport system.business.Project;\nimport system.business.User;\nimport system.business.UserProject;\nimport system.service.repository.ProjectService;\nimport system.service.repository.UserProjectService;\nimport system.service.repository.UserService;\n\nimport javax.annotation.PostConstruct;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Service\npublic class DataInitializer {\n\n    private final ProjectService projectService;\n\n    private final UserService userService;\n\n    private final UserProjectService userProjectService;\n\n    @Autowired\n    public DataInitializer(ProjectService projectService, UserService userService, UserProjectService userProjectService) {\n        this.projectService = projectService;\n        this.userService = userService;\n        this.userProjectService = userProjectService;\n    }\n\n    @PostConstruct\n    private void init() {\n        final Project p = new Project();\n        final User u = new User();\n        final UserProject up = new UserProject();\n        up.setProject(p);\n        up.setEmployee(u);\n\n        Set&lt;UserProject&gt; upSet = new HashSet&lt;&gt;();\n\n        upSet.add(up);\n\n        p.setName(\"Project1\");\n        p.setDescription(\"Test project\");\n//        p.setUserProject(upSet);\n\n        projectService.persist(p);\n\n        u.setUserProjects(upSet);\n\n        userService.persist(u);\n    }\n}\n","id":44},{"name":"OfficeController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Office;\nimport system.dao.OfficeDao;\n\nimport java.util.List;\n\n/**\n * Created by Marek on 9/30/17.\n */\n\n@RestController\n@RequestMapping(\"/office\")\npublic class OfficeController {\n\n    @Autowired\n    private OfficeDao officeDao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Office&gt; getAll() {\n        return officeDao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Office office) {\n        officeDao.persist(office);\n    }\n\n}\n","id":45},{"name":"UserDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.User;\n\nimport javax.persistence.NoResultException;\n\n/**\n * Created by HMT on 06.01.2017.\n */\n@Repository\npublic class UserDao extends BaseDao&lt;User&gt; {\n    public UserDao() {\n        super(User.class);\n    }\n\n    public User findByUsername(String username) {\n        try {\n            return em.createNamedQuery(\"User.findByUsername\", User.class).setParameter(\"username\", username)\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n","id":46},{"name":"ServiceConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"package system.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.web.client.RestTemplate;\n\n/**\n * Created by HMT on 25.11.2016.\n */\n@Configuration\n@ComponentScan(basePackages = \"system.service\")\npublic class ServiceConfig {\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    /**\n     * {@link RestTemplate} can be used to communicate with web services of another application -\n     * see for example &lt;a href=\"http://www.baeldung.com/rest-template\"&gt;http://www.baeldung.com/rest-template&lt;/a&gt;.\n     */\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n}\n","id":47},{"name":"SecurityConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.authentication.AuthenticationFailureHandler;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.authentication.logout.LogoutSuccessHandler;\nimport org.springframework.security.web.csrf.CsrfFilter;\nimport system.security.CsrfHeaderFilter;\nimport system.security.SecurityConstants;\n\n@Configuration\n@EnableWebSecurity\n@ComponentScan(basePackages = \"system.security\")\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    private static final String[] COOKIES_TO_DESTROY = {\n            SecurityConstants.SESSION_COOKIE_NAME,\n            SecurityConstants.REMEMBER_ME_COOKIE_NAME,\n            SecurityConstants.CSRF_COOKIE_NAME\n    };\n\n    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AuthenticationFailureHandler authenticationFailureHandler;\n\n    @Autowired\n    private AuthenticationSuccessHandler authenticationSuccessHandler;\n\n    @Autowired\n    private LogoutSuccessHandler logoutSuccessHandler;\n\n    @Autowired\n    private AuthenticationProvider authenticationProvider;\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.authenticationProvider(authenticationProvider);\n    }\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests().anyRequest().permitAll().and()\n            .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)\n            .and().headers().frameOptions().sameOrigin()\n            .and()\n            .authenticationProvider(authenticationProvider)\n            .addFilterAfter(new CsrfHeaderFilter(), CsrfFilter.class)\n            .csrf().disable()\n            .formLogin().successHandler(authenticationSuccessHandler)\n            .failureHandler(authenticationFailureHandler)\n            .loginProcessingUrl(SecurityConstants.SECURITY_CHECK_URI)\n            .usernameParameter(SecurityConstants.USERNAME_PARAM).passwordParameter(SecurityConstants.PASSWORD_PARAM)\n            .and()\n            .logout().invalidateHttpSession(true).deleteCookies(COOKIES_TO_DESTROY)\n            .logoutUrl(SecurityConstants.LOGOUT_URI).logoutSuccessHandler(logoutSuccessHandler)\n            .and().sessionManagement().maximumSessions(1);\n    }\n}\n","id":48},{"name":"UserProject","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to User</nobr><br/><nobr>Many to one relation to Project</nobr>","sourcecode":"package system.business;\n\nimport javax.persistence.*;\nimport java.util.Date;\n\n/**\n * Created by krystof on 9/3/17.\n */\n\n//@NamedQueries({\n//        @NamedQuery(name = \"UserProject.findByUserAndStartingDate\",\n//                query = \"SELECT l FROM UserProject l WHERE l.user_id = :userID \" +\n//                        \"AND l.from = :startingDate\"),\n//})\n\n@Entity()\npublic class UserProject extends AbstractBusinessObject {\n\n    @Column()\n    private String role;\n\n    @Column(name = \"starting_date\")\n    private Date from;\n\n    @Column(name = \"ending_date\")\n    private Date end;\n\n    @ManyToOne()\n    @JoinColumn(name = \"USER_ID\")\n    private User user;\n\n    @ManyToOne()\n    @JoinColumn(name = \"PROJECT_ID\")\n    private Project project;\n\n    public UserProject() {\n\n    }\n\n    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public Date getFrom() {\n        return from;\n    }\n\n    public void setFrom(Date from) {\n        this.from = from;\n    }\n\n    public Date getEnd() {\n        return end;\n    }\n\n    public void setEnd(Date end) {\n        this.end = end;\n    }\n\n    public User getEmployee() {\n        return user;\n    }\n\n    public void setEmployee(User user) {\n        this.user = user;\n    }\n\n    public Project getProject() {\n        return project;\n    }\n\n    public void setProject(Project project) {\n        this.project = project;\n    }\n}\n","id":49},{"name":"UserProjectDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport system.business.UserProject;\n\nimport javax.persistence.NoResultException;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class UserProjectDao extends BaseDao&lt;UserProject&gt; {\n\n    protected UserProjectDao() {\n        super(UserProject.class);\n    }\n\n    public List&lt;UserProject&gt; findByUserAndStartingDate(Integer userID, Date startingDate) {\n        try {\n            return em.createNamedQuery(\"UserProject.findByUserAndStartingDate\", UserProject.class)\n                            .setParameter(userID, startingDate).getResultList();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n","id":50},{"name":"UserController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Project;\nimport system.business.User;\nimport system.dao.ProjectDao;\nimport system.dao.UserDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    private UserDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;User&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody User user) {\n        dao.persist(user);\n    }\n}\n","id":51},{"name":"LoginStatus","group":2,"description":"<nobr>Package: system.security.model</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security.model;\n\n/**\n * @author ledvima1\n */\npublic class LoginStatus {\n\n    private boolean loggedIn;\n    private String username;\n    private String errorMessage;\n    private boolean success;\n\n    public LoginStatus() {\n    }\n\n    public LoginStatus(boolean loggedIn, boolean success, String username, String errorMessage) {\n        this.loggedIn = loggedIn;\n        this.username = username;\n        this.errorMessage = errorMessage;\n        this.success = success;\n    }\n\n    public boolean isLoggedIn() {\n        return loggedIn;\n    }\n\n    public void setLoggedIn(boolean loggedIn) {\n        this.loggedIn = loggedIn;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getErrorMessage() {\n        return errorMessage;\n    }\n\n    public void setErrorMessage(String errorMessage) {\n        this.errorMessage = errorMessage;\n    }\n\n    public boolean isSuccess() {\n        return success;\n    }\n\n    public void setSuccess(boolean success) {\n        this.success = success;\n    }\n}\n","id":52},{"name":"DegreeDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Degree;\nimport system.business.Project;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class DegreeDaoTest extends BaseDaoTestRunner{\n\n    @Autowired\n    private DegreeDao degreeDao;\n\n    @Test\n    public void findByName() throws Exception {\n        final Degree degree = new Degree();\n        degree.setName(\"Advanced Situational Comedy\");\n        degreeDao.persist(degree);\n        final Degree result = degreeDao.findByName(degree.getName());\n        assertNotNull(result);\n        assertEquals(degree.getId(), result.getId());\n    }\n//TODO add test that doesnt find if not exists\n}\n","id":53},{"name":"AddressDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport system.business.Address;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class AddressDao extends BaseDao&lt;Address&gt;{\n    protected AddressDao() {\n        super(Address.class);\n    }\n}\n","id":54},{"name":"PositionController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Position;\nimport system.business.Project;\nimport system.dao.PositionDao;\nimport system.dao.ProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/position\")\npublic class PositionController {\n\n    @Autowired\n    private PositionDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Position&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Position position) {\n        dao.persist(position);\n    }\n}\n","id":55},{"name":"RepositoryService","group":9,"description":"<nobr>Package: system.service.repository</nobr>","sourcecode":"package system.service.repository;\n\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Defines basic CRUD operations for repository-based services.\n *\n * @param &lt;T&gt; Type handled by this service\n */\npublic interface RepositoryService&lt;T&gt; {\n\n    List&lt;T&gt; findAll();\n\n    T find(Integer id);\n\n    void persist(T instance);\n\n    void persist(Collection&lt;T&gt; instances);\n\n    void update(T instance);\n\n    void remove(T instance);\n\n    /**\n     * Checks whether an instance with the specified id exists.\n     *\n     * @param id Instance identifier\n     * @return Whether a matching instance exists\n     */\n    boolean exists(Integer id);\n}\n","id":56},{"name":"AppConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.EnableAspectJAutoProxy;\nimport org.springframework.context.annotation.Import;\n\n/**\n * Root configuration file of our project - it sets up basic Spring configuration and imports additional configuration files.\n * &lt;p&gt;\n * It is good to separate configuration of different components of the application, because they can then be configured\n * independently for example in tests.\n */\n// This annotation is required when services without separate interfaces are used. It causes cglib-based proxies of\n// the services to be used - see http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/EnableAspectJAutoProxy.html#proxyTargetClass--\n@Configuration  // This class is a Spring configuration\n@EnableAspectJAutoProxy(proxyTargetClass = true)\n@Import({WebAppConfig.class, PersistenceConfig.class, ServiceConfig.class}) // Import additional configuration classes\npublic class AppConfig {\n}\n","id":57},{"name":"SessionTimeoutManager","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\nimport javax.servlet.annotation.WebListener;\nimport javax.servlet.http.HttpSessionEvent;\nimport javax.servlet.http.HttpSessionListener;\n\n@WebListener\npublic class SessionTimeoutManager implements HttpSessionListener {\n\n    @Override\n    public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n        httpSessionEvent.getSession().setMaxInactiveInterval(SecurityConstants.SESSION_TIMEOUT);\n    }\n\n    @Override\n    public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {\n        // do nothing\n    }\n}\n","id":58},{"name":"SoftSkill","group":3,"description":"<nobr>Package: system.business</nobr>","sourcecode":"package system.business;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\nimport system.business.enums.SkillProfficiency;\n\nimport javax.persistence.*;\n\npublic class SoftSkill extends Skill {\n\n    @Enumerated()\n    private SkillProfficiency profficiency;\n\n    @Column()\n    private String note;\n\n    public SoftSkill() {\n\n    }\n\n    public String getNote() {\n        return note;\n    }\n\n    public void setNote(String note) {\n        this.note = note;\n    }\n\n    public SkillProfficiency getProfficiency() {\n        return profficiency;\n    }\n\n    public void setProfficiency(SkillProfficiency profficiency) {\n        this.profficiency = profficiency;\n    }\n\n}\n","id":59},{"name":"CheckPasswordForm","group":11,"description":"<nobr>Package: system.unit</nobr>","sourcecode":"/*\n * A set of tests designed to check username errors at login/registration\n */\npackage system.unit;\n\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\n\n/**\n * This is a template prepared to test a password form and its possible invalid inputs\n * @author Szeles Marek\n */\n\npublic class CheckPasswordForm {\n    \n    @BeforeClass\n    public static void beforeClass() {\n    }\n\n    @AfterClass\n    public static void afterClass() {\n    }\n\n \n    /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank password returns the desired \n     * error message.\n     */\n    /*\n    @Test\n    public void checkPassword_emptyBoth_test(){\n        String expectedResult = \"You need to choose your password!\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"\", \"\");        \n        assertEquals(expectedResult,realResult);        \n    }\n    */\n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank password returns the desired \n     * error message.\n     */\n     /*\n    @Test\n    public void checkPassword_emptyFirst_test(){\n        String expectedResult = \"You need to choose your password!\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"\", \"askjdfhaslkfja\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a blank confirm password field returns \n     * the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_emptySecond_test(){\n        String expectedResult = \"You need to re-enter your password to proceed.\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"asdfasdasdff\", \"\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass password and confirm password fields \n     * with different values returns the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_bothDifferent_test(){\n        String expectedResult = \"You need to re-enter your password to proceed.\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"asdfasdfasdf\", \"fsadfsdfadsf\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass password shorter than 8 characters\n     * returns the desired error message.\n     */\n     /*\n    @Test\n    public void checkPassword_shorterThan8_test(){\n        String expectedResult = \"Password too short! Minimum: 8, Given: 2\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"as\", \"askjdfhaslkfja\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n     /**\n     * Tests the password checking function.\n     * Checks if a request to pass a valid password request succeeds.\n     */\n     /*\n    @Test\n    public void checkPassword_bothTheSame_test(){\n        String expectedResult = \"OK\";         \n        String realResult = Main.Handlers.CheckPassword.checkPasswords(\"lolololo\", \"lolololo\");        \n        assertEquals(expectedResult,realResult);        \n    }*/\n    \n}\n","id":60},{"name":"SecurityConstants","group":1,"description":"<nobr>Package: system.security</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n *\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n *\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.security;\n\n/**\n * @author ledvima1\n */\npublic class SecurityConstants {\n\n    private SecurityConstants() {\n        throw new AssertionError();\n    }\n\n    public static final String SESSION_COOKIE_NAME = \"INBAS_JSESSIONID\";\n\n    public static final String REMEMBER_ME_COOKIE_NAME = \"remember-me\";\n\n    public static final String CSRF_COOKIE_NAME = \"CSRF-TOKEN\";\n\n    public static final String USERNAME_PARAM = \"username\";\n\n    public static final String PASSWORD_PARAM = \"password\";\n\n    public static final String SECURITY_CHECK_URI = \"/j_spring_security_check\";\n\n    public static final String LOGOUT_URI = \"/j_spring_security_logout\";\n\n    public static final String COOKIE_URI = \"/\";\n\n    /**\n     * Session timeout in seconds.\n     */\n    public static final int SESSION_TIMEOUT = 30 * 60;\n}\n","id":61},{"name":"UserService","group":9,"description":"<nobr>Package: system.service.repository</nobr>","sourcecode":"package system.service.repository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport system.business.User;\nimport system.dao.GenericDao;\nimport system.dao.UserDao;\n\n@Service\npublic class UserService extends AbstractRepositoryService&lt;User&gt; {\n\n    private final UserDao dao;\n\n    @Autowired\n    public UserService(UserDao dao) {\n        this.dao = dao;\n    }\n\n    @Override\n    protected GenericDao&lt;User&gt; getPrimaryDao() {\n        return dao;\n    }\n}\n","id":62},{"name":"DegreeDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.Degree;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n@Repository\npublic class DegreeDao extends BaseDao&lt;Degree&gt;{\n\n    protected DegreeDao() {\n        super(Degree.class);\n    }\n\n//    @Transactional(readOnly = true)\n    public Degree findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"Degree.findByName\", Degree.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n\n","id":63},{"name":"UniversityDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Project;\nimport system.business.University;\n\nimport static org.junit.Assert.*;\n\n/**\n * Created by krystof on 10/1/17.\n */\npublic class UniversityDaoTest extends BaseDaoTestRunner {\n    @Autowired\n    private UniversityDao universityDao;\n\n    @Test\n    public void findByName() throws Exception {\n        final University university = new University();\n        university.setName(\"CVUT\");\n        universityDao.persist(university);\n        final University result = universityDao.findByName(university.getName());\n        assertNotNull(result);\n        assertEquals(university.getId(), result.getId());\n    }\n}\n","id":64},{"name":"UserProjectController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Project;\nimport system.business.UserProject;\nimport system.dao.ProjectDao;\nimport system.dao.UserProjectDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n\n@RestController\n@RequestMapping(\"/userProject\")\npublic class UserProjectController {\n\n    @Autowired\n    private UserProjectDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;UserProject&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody UserProject userProject) {\n        dao.persist(userProject);\n    }\n}\n","id":65},{"name":"UserProjectService","group":9,"description":"<nobr>Package: system.service.repository</nobr>","sourcecode":"package system.service.repository;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport system.business.UserProject;\nimport system.dao.GenericDao;\nimport system.dao.UserProjectDao;\n\n@Service\npublic class UserProjectService extends AbstractRepositoryService&lt;UserProject&gt; {\n\n    private final UserProjectDao dao;\n\n    @Autowired\n    public UserProjectService(UserProjectDao dao) {\n        this.dao = dao;\n    }\n\n    @Override\n    protected GenericDao&lt;UserProject&gt; getPrimaryDao() {\n        return dao;\n    }\n}\n","id":66},{"name":"RestConfig","group":6,"description":"<nobr>Package: system.config</nobr>","sourcecode":"/**\n * Copyright (C) 2016 Czech Technical University in Prague\n * &lt;p&gt;\n * This program is free software: you can redistribute it and/or modify it under\n * the terms of the GNU General Public License as published by the Free Software\n * Foundation, either version 3 of the License, or (at your option) any\n * later version.\n * &lt;p&gt;\n * This program is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n * details. You should have received a copy of the GNU General Public License\n * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.\n */\npackage system.config;\n\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ComponentScan(basePackages = \"system.rest\")\npublic class RestConfig {\n\n    /**\n     * Object mapper is used to serialize POJOs into JSON and vice versa. It is a class from the Jackson framework.\n     * &lt;p&gt;\n     * We are creating it here so that we can configure it a little.\n     */\n    @Bean\n    public ObjectMapper objectMapper() {\n        final ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        return objectMapper;\n    }\n}\n","id":67},{"name":"Skill","group":3,"description":"<nobr>Package: system.business</nobr><br/><br/>Many to one relations:<br/><nobr>Many to one relation to User</nobr>","sourcecode":"package system.business;\n\n/**\n * Created by Marek on 3.9.2017.\n */\n\nimport system.business.enums.SkillProfficiency;\n\nimport javax.persistence.*;\n\n@NamedQueries({\n        @NamedQuery(name = \"Skill.findByName\",\n                query = \"SELECT l FROM Skill l WHERE LOWER(l.name) = :name\"),\n\n        @NamedQuery(name = \"Skill.findAll\", query = \"SELECT l FROM Skill l\")\n})\n\n@Entity\npublic class Skill extends AbstractBusinessObject {\n\n    @Column()\n    private String name;\n\n    @Enumerated()\n    private SkillProfficiency profficiency;\n\n    @ManyToOne\n    User user;\n\n    public Skill() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public SkillProfficiency getProfficiency() {\n        return profficiency;\n    }\n\n    public void setProfficiency(SkillProfficiency profficiency) {\n        this.profficiency = profficiency;\n    }\n\n    public User getEmployee() {\n        return user;\n    }\n\n    public void setEmployee(User user) {\n        this.user = user;\n    }\n}\n","id":68},{"name":"UniversityDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\nimport system.business.University;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@Repository\npublic class UniversityDao extends BaseDao&lt;University&gt; {\n\n    protected UniversityDao() {\n        super(University.class);\n    }\n\n    @Transactional(readOnly = true)\n    public University findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"University.findByName\", University.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n}\n","id":69},{"name":"DegreeType","group":7,"description":"<nobr>Package: system.business.enums</nobr>","sourcecode":"package system.business.enums;\n\n/**\n * Created by Marek on 3.9.2017.\n */\npublic enum DegreeType {\n\n    BACHELOR, MASTERS, DOCTOR, PROFESSOR;\n\n}\n","id":70},{"name":"OfficeDao","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.*;\nimport system.business.Office;\n\nimport javax.persistence.NoResultException;\nimport java.util.Objects;\n\n/**\n * Created by Marek on 9/30/17.\n */\n@Repository\npublic class OfficeDao extends BaseDao&lt;Office&gt;{\n\n    protected OfficeDao() {\n        super(Office.class);\n    }\n\n//    @Transactional(readOnly = true)\n    public Office findByName(String name) {\n        Objects.requireNonNull(name);\n        try {\n            return em.createNamedQuery(\"Office.findByName\", Office.class)\n                    .setParameter(\"name\", name.toLowerCase())\n                    .getSingleResult();\n        } catch (NoResultException e) {\n            return null;\n        }\n    }\n\n}\n","id":71},{"name":"UniversityController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Project;\nimport system.business.University;\nimport system.dao.ProjectDao;\nimport system.dao.UniversityDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/university\")\npublic class UniversityController {\n\n    @Autowired\n    private UniversityDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;University&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody University university) {\n        dao.persist(university);\n    }\n}\n","id":72},{"name":"OfficeDaoTest","group":4,"description":"<nobr>Package: system.dao</nobr>","sourcecode":"package system.dao;\n\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport system.business.Office;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\n/**\n * Created by Marek on 30.09.2017.\n */\npublic class OfficeDaoTest extends BaseDaoTestRunner{\n\n    @Autowired\n    private OfficeDao officeDao;\n\n    @Test\n    public void findByLocationName(){\n        final Office o = new Office();\n        o.setName(\"Prague\");\n\n        officeDao.persist(o);\n\n        final Office result = officeDao.findByName(o.getName());\n        assertNotNull(result);\n        assertEquals(o.getId(), result.getId());\n    }\n\n}\n","id":73},{"name":"SkillController","group":5,"description":"<nobr>Package: system.rest</nobr>","sourcecode":"package system.rest;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport system.business.Project;\nimport system.business.Skill;\nimport system.dao.ProjectDao;\nimport system.dao.SkillDao;\n\nimport java.util.List;\n\n/**\n * Created by krystof on 10/1/17.\n */\n\n@RestController\n@RequestMapping(\"/skill\")\npublic class SkillController {\n\n    @Autowired\n    private SkillDao dao;\n\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List&lt;Skill&gt; getAll() {\n        return dao.findAll();\n    }\n\n    @RequestMapping(method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)\n    public void create(@RequestBody Skill skill) {\n        dao.persist(skill);\n    }\n}\n","id":74}],"links":[{"source":49,"target":40,"value":1,"type":"MANY_TO_ONE"},{"source":49,"target":26,"value":1,"type":"MANY_TO_ONE"},{"source":11,"target":40,"value":1,"type":"MANY_TO_ONE"},{"source":39,"target":40,"value":1,"type":"ONE_TO_MANY"},{"source":39,"target":2,"value":1,"type":"MANY_TO_ONE"},{"source":26,"target":49,"value":1,"type":"ONE_TO_MANY"},{"source":40,"target":40,"value":1,"type":"MANY_TO_MANY"},{"source":40,"target":40,"value":1,"type":"MANY_TO_MANY"},{"source":40,"target":10,"value":1,"type":"ONE_TO_MANY"},{"source":40,"target":11,"value":1,"type":"ONE_TO_MANY"},{"source":40,"target":68,"value":1,"type":"ONE_TO_MANY"},{"source":40,"target":39,"value":1,"type":"MANY_TO_ONE"},{"source":40,"target":2,"value":1,"type":"MANY_TO_ONE"},{"source":40,"target":49,"value":1,"type":"ONE_TO_MANY"},{"source":10,"target":40,"value":1,"type":"MANY_TO_ONE"},{"source":10,"target":28,"value":1,"type":"MANY_TO_ONE"},{"source":2,"target":40,"value":1,"type":"ONE_TO_MANY"},{"source":2,"target":39,"value":1,"type":"ONE_TO_MANY"},{"source":68,"target":40,"value":1,"type":"MANY_TO_ONE"}]}
